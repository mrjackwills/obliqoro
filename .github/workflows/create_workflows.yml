name: Release CI
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  cross_platform_build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      matrix:
        include:
          - build: linux
            os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.os != 'windows-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl file libayatana-appindicator3-dev libgtk-3-dev librsvg2-dev libsoup-3.0-dev libssl-dev libssl-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config wget

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install Rust dependencies web
        run: cargo install tauri-cli

      - name: Install node dependencies
        run: npm install

      - name: Build
        run: cargo tauri build

      - uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: artifacts-linux
          path: |
            ./src-tauri/target/release/bundle/appimage/**.AppImage
            ./src-tauri/target/release/bundle/deb/**.deb

      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: artifacts-windows
          path: |
            ./src-tauri/target/release/bundle/msi/*.msi

  ###################
  ## Create release #
  ###################

  create_release:
    needs: [cross_platform_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Write release version to env
        run: |
          CURRENT_SEMVER=${GITHUB_REF_NAME#v}
          echo "CURRENT_SEMVER=$CURRENT_SEMVER" >> $GITHUB_ENV

      - name: Download linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-linux
          path: artifacts/linux

      - name: Download windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-windows
          path: artifacts/windows

      - name: Rename artifacts
        run: |
          mv "artifacts/linux/deb/obliqoro_${{ env.CURRENT_SEMVER }}_amd64.deb" "artifacts/Obliqoro_linux_x86_64.deb"
          mv "artifacts/linux/appimage/obliqoro_${{ env.CURRENT_SEMVER }}_amd64.AppImage" "artifacts/Obliqoro_linux_x86_64.AppImage"
          mv "artifacts/windows/Obliqoro_${{ env.CURRENT_SEMVER }}_x64_en-US.msi" "artifacts/Obliqoro_windows_x86_64.msi"

      - name: Update Release
        uses: ncipollo/release-action@v1
        with:
          makeLatest: true
          name: ${{ github.ref_name }}
          tag: ${{ github.ref }}
          bodyFile: ".github/release-body.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            **/Obliqoro_*.msi
            **/Obliqoro_*.deb
            **/Obliqoro_*.AppImage
